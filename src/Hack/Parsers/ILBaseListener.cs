//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\IL.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IILListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.Diagnostics.DebuggerNonUserCode]
public partial class ILBaseListener : IILListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ILParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] ILParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ILParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] ILParser.ProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>call</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCall([NotNull] ILParser.CallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>call</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCall([NotNull] ILParser.CallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>function</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunction([NotNull] ILParser.FunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>function</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunction([NotNull] ILParser.FunctionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>return</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturn([NotNull] ILParser.ReturnContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>return</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturn([NotNull] ILParser.ReturnContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ifGoto</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfGoto([NotNull] ILParser.IfGotoContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ifGoto</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfGoto([NotNull] ILParser.IfGotoContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>goto</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGoto([NotNull] ILParser.GotoContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>goto</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGoto([NotNull] ILParser.GotoContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>label</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLabel([NotNull] ILParser.LabelContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>label</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLabel([NotNull] ILParser.LabelContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>pushLocal</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPushLocal([NotNull] ILParser.PushLocalContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>pushLocal</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPushLocal([NotNull] ILParser.PushLocalContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>pushArgument</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPushArgument([NotNull] ILParser.PushArgumentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>pushArgument</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPushArgument([NotNull] ILParser.PushArgumentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>pushThis</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPushThis([NotNull] ILParser.PushThisContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>pushThis</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPushThis([NotNull] ILParser.PushThisContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>pushThat</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPushThat([NotNull] ILParser.PushThatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>pushThat</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPushThat([NotNull] ILParser.PushThatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>pushPointer</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPushPointer([NotNull] ILParser.PushPointerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>pushPointer</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPushPointer([NotNull] ILParser.PushPointerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>pushTemp</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPushTemp([NotNull] ILParser.PushTempContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>pushTemp</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPushTemp([NotNull] ILParser.PushTempContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>pushConstant</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPushConstant([NotNull] ILParser.PushConstantContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>pushConstant</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPushConstant([NotNull] ILParser.PushConstantContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>pushStatic</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPushStatic([NotNull] ILParser.PushStaticContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>pushStatic</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPushStatic([NotNull] ILParser.PushStaticContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>popLocal</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPopLocal([NotNull] ILParser.PopLocalContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>popLocal</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPopLocal([NotNull] ILParser.PopLocalContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>popArgument</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPopArgument([NotNull] ILParser.PopArgumentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>popArgument</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPopArgument([NotNull] ILParser.PopArgumentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>popThis</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPopThis([NotNull] ILParser.PopThisContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>popThis</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPopThis([NotNull] ILParser.PopThisContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>popThat</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPopThat([NotNull] ILParser.PopThatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>popThat</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPopThat([NotNull] ILParser.PopThatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>popPointer</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPopPointer([NotNull] ILParser.PopPointerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>popPointer</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPopPointer([NotNull] ILParser.PopPointerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>popTemp</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPopTemp([NotNull] ILParser.PopTempContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>popTemp</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPopTemp([NotNull] ILParser.PopTempContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>popStatic</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPopStatic([NotNull] ILParser.PopStaticContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>popStatic</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPopStatic([NotNull] ILParser.PopStaticContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>add</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdd([NotNull] ILParser.AddContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>add</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdd([NotNull] ILParser.AddContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>sub</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSub([NotNull] ILParser.SubContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>sub</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSub([NotNull] ILParser.SubContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>neg</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNeg([NotNull] ILParser.NegContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>neg</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNeg([NotNull] ILParser.NegContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>eq</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEq([NotNull] ILParser.EqContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>eq</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEq([NotNull] ILParser.EqContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>gt</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGt([NotNull] ILParser.GtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>gt</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGt([NotNull] ILParser.GtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lt</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLt([NotNull] ILParser.LtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lt</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLt([NotNull] ILParser.LtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>and</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnd([NotNull] ILParser.AndContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>and</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnd([NotNull] ILParser.AndContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>or</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOr([NotNull] ILParser.OrContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>or</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOr([NotNull] ILParser.OrContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>not</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNot([NotNull] ILParser.NotContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>not</c>
	/// labeled alternative in <see cref="ILParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNot([NotNull] ILParser.NotContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
