//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\IL.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
public partial class ILParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, UINT=20, COMMENT=21, WS=22;
	public const int
		RULE_function = 0, RULE_command = 1;
	public static readonly string[] ruleNames = {
		"function", "command"
	};

	private static readonly string[] _LiteralNames = {
		null, "'push'", "'local'", "'argument'", "'this'", "'that'", "'pointer'", 
		"'temp'", "'constant'", "'static'", "'pop'", "'add'", "'sub'", "'neg'", 
		"'eq'", "'gt'", "'lt'", "'and'", "'or'", "'not'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "UINT", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "IL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ILParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ILParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ILParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 0, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4;
				command();
				}
				}
				State = 7;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 1047554L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	 
		public CommandContext() { }
		public virtual void CopyFrom(CommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubContext : CommandContext {
		public SubContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitSub(this);
		}
	}
	public partial class PushThisContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(ILParser.UINT, 0); }
		public PushThisContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterPushThis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitPushThis(this);
		}
	}
	public partial class PopLocalContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(ILParser.UINT, 0); }
		public PopLocalContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterPopLocal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitPopLocal(this);
		}
	}
	public partial class PopPointerContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(ILParser.UINT, 0); }
		public PopPointerContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterPopPointer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitPopPointer(this);
		}
	}
	public partial class LtContext : CommandContext {
		public LtContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterLt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitLt(this);
		}
	}
	public partial class PopConstantContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(ILParser.UINT, 0); }
		public PopConstantContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterPopConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitPopConstant(this);
		}
	}
	public partial class PushLocalContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(ILParser.UINT, 0); }
		public PushLocalContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterPushLocal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitPushLocal(this);
		}
	}
	public partial class NegContext : CommandContext {
		public NegContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterNeg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitNeg(this);
		}
	}
	public partial class NotContext : CommandContext {
		public NotContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
	}
	public partial class PushArgumentContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(ILParser.UINT, 0); }
		public PushArgumentContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterPushArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitPushArgument(this);
		}
	}
	public partial class PushTempContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(ILParser.UINT, 0); }
		public PushTempContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterPushTemp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitPushTemp(this);
		}
	}
	public partial class PushConstantContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(ILParser.UINT, 0); }
		public PushConstantContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterPushConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitPushConstant(this);
		}
	}
	public partial class AndContext : CommandContext {
		public AndContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
	}
	public partial class PopArgumentContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(ILParser.UINT, 0); }
		public PopArgumentContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterPopArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitPopArgument(this);
		}
	}
	public partial class PopStaticContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(ILParser.UINT, 0); }
		public PopStaticContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterPopStatic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitPopStatic(this);
		}
	}
	public partial class AddContext : CommandContext {
		public AddContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
	}
	public partial class PushStaticContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(ILParser.UINT, 0); }
		public PushStaticContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterPushStatic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitPushStatic(this);
		}
	}
	public partial class OrContext : CommandContext {
		public OrContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
	}
	public partial class EqContext : CommandContext {
		public EqContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterEq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitEq(this);
		}
	}
	public partial class PushPointerContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(ILParser.UINT, 0); }
		public PushPointerContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterPushPointer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitPushPointer(this);
		}
	}
	public partial class PopThatContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(ILParser.UINT, 0); }
		public PopThatContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterPopThat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitPopThat(this);
		}
	}
	public partial class GtContext : CommandContext {
		public GtContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterGt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitGt(this);
		}
	}
	public partial class PopTempContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(ILParser.UINT, 0); }
		public PopTempContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterPopTemp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitPopTemp(this);
		}
	}
	public partial class PushThatContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(ILParser.UINT, 0); }
		public PushThatContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterPushThat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitPushThat(this);
		}
	}
	public partial class PopThisContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(ILParser.UINT, 0); }
		public PopThisContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.EnterPopThis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IILListener typedListener = listener as IILListener;
			if (typedListener != null) typedListener.ExitPopThis(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 2, RULE_command);
		try {
			State = 66;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				_localctx = new PushLocalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 9;
				Match(T__0);
				State = 10;
				Match(T__1);
				State = 11;
				Match(UINT);
				}
				break;
			case 2:
				_localctx = new PushArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 12;
				Match(T__0);
				State = 13;
				Match(T__2);
				State = 14;
				Match(UINT);
				}
				break;
			case 3:
				_localctx = new PushThisContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 15;
				Match(T__0);
				State = 16;
				Match(T__3);
				State = 17;
				Match(UINT);
				}
				break;
			case 4:
				_localctx = new PushThatContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 18;
				Match(T__0);
				State = 19;
				Match(T__4);
				State = 20;
				Match(UINT);
				}
				break;
			case 5:
				_localctx = new PushPointerContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 21;
				Match(T__0);
				State = 22;
				Match(T__5);
				State = 23;
				Match(UINT);
				}
				break;
			case 6:
				_localctx = new PushTempContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 24;
				Match(T__0);
				State = 25;
				Match(T__6);
				State = 26;
				Match(UINT);
				}
				break;
			case 7:
				_localctx = new PushConstantContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 27;
				Match(T__0);
				State = 28;
				Match(T__7);
				State = 29;
				Match(UINT);
				}
				break;
			case 8:
				_localctx = new PushStaticContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 30;
				Match(T__0);
				State = 31;
				Match(T__8);
				State = 32;
				Match(UINT);
				}
				break;
			case 9:
				_localctx = new PopLocalContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 33;
				Match(T__9);
				State = 34;
				Match(T__1);
				State = 35;
				Match(UINT);
				}
				break;
			case 10:
				_localctx = new PopArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 36;
				Match(T__9);
				State = 37;
				Match(T__2);
				State = 38;
				Match(UINT);
				}
				break;
			case 11:
				_localctx = new PopThisContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 39;
				Match(T__9);
				State = 40;
				Match(T__3);
				State = 41;
				Match(UINT);
				}
				break;
			case 12:
				_localctx = new PopThatContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 42;
				Match(T__9);
				State = 43;
				Match(T__4);
				State = 44;
				Match(UINT);
				}
				break;
			case 13:
				_localctx = new PopPointerContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 45;
				Match(T__9);
				State = 46;
				Match(T__5);
				State = 47;
				Match(UINT);
				}
				break;
			case 14:
				_localctx = new PopTempContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 48;
				Match(T__9);
				State = 49;
				Match(T__6);
				State = 50;
				Match(UINT);
				}
				break;
			case 15:
				_localctx = new PopConstantContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 51;
				Match(T__9);
				State = 52;
				Match(T__7);
				State = 53;
				Match(UINT);
				}
				break;
			case 16:
				_localctx = new PopStaticContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 54;
				Match(T__9);
				State = 55;
				Match(T__8);
				State = 56;
				Match(UINT);
				}
				break;
			case 17:
				_localctx = new AddContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 57;
				Match(T__10);
				}
				break;
			case 18:
				_localctx = new SubContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 58;
				Match(T__11);
				}
				break;
			case 19:
				_localctx = new NegContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 59;
				Match(T__12);
				}
				break;
			case 20:
				_localctx = new EqContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 60;
				Match(T__13);
				}
				break;
			case 21:
				_localctx = new GtContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 61;
				Match(T__14);
				}
				break;
			case 22:
				_localctx = new LtContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 62;
				Match(T__15);
				}
				break;
			case 23:
				_localctx = new AndContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 63;
				Match(T__16);
				}
				break;
			case 24:
				_localctx = new OrContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 64;
				Match(T__17);
				}
				break;
			case 25:
				_localctx = new NotContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 65;
				Match(T__18);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,22,69,2,0,7,0,2,1,7,1,1,0,4,0,6,8,0,11,0,12,0,7,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		3,1,67,8,1,1,1,0,0,2,0,2,0,0,91,0,5,1,0,0,0,2,66,1,0,0,0,4,6,3,2,1,0,5,
		4,1,0,0,0,6,7,1,0,0,0,7,5,1,0,0,0,7,8,1,0,0,0,8,1,1,0,0,0,9,10,5,1,0,0,
		10,11,5,2,0,0,11,67,5,20,0,0,12,13,5,1,0,0,13,14,5,3,0,0,14,67,5,20,0,
		0,15,16,5,1,0,0,16,17,5,4,0,0,17,67,5,20,0,0,18,19,5,1,0,0,19,20,5,5,0,
		0,20,67,5,20,0,0,21,22,5,1,0,0,22,23,5,6,0,0,23,67,5,20,0,0,24,25,5,1,
		0,0,25,26,5,7,0,0,26,67,5,20,0,0,27,28,5,1,0,0,28,29,5,8,0,0,29,67,5,20,
		0,0,30,31,5,1,0,0,31,32,5,9,0,0,32,67,5,20,0,0,33,34,5,10,0,0,34,35,5,
		2,0,0,35,67,5,20,0,0,36,37,5,10,0,0,37,38,5,3,0,0,38,67,5,20,0,0,39,40,
		5,10,0,0,40,41,5,4,0,0,41,67,5,20,0,0,42,43,5,10,0,0,43,44,5,5,0,0,44,
		67,5,20,0,0,45,46,5,10,0,0,46,47,5,6,0,0,47,67,5,20,0,0,48,49,5,10,0,0,
		49,50,5,7,0,0,50,67,5,20,0,0,51,52,5,10,0,0,52,53,5,8,0,0,53,67,5,20,0,
		0,54,55,5,10,0,0,55,56,5,9,0,0,56,67,5,20,0,0,57,67,5,11,0,0,58,67,5,12,
		0,0,59,67,5,13,0,0,60,67,5,14,0,0,61,67,5,15,0,0,62,67,5,16,0,0,63,67,
		5,17,0,0,64,67,5,18,0,0,65,67,5,19,0,0,66,9,1,0,0,0,66,12,1,0,0,0,66,15,
		1,0,0,0,66,18,1,0,0,0,66,21,1,0,0,0,66,24,1,0,0,0,66,27,1,0,0,0,66,30,
		1,0,0,0,66,33,1,0,0,0,66,36,1,0,0,0,66,39,1,0,0,0,66,42,1,0,0,0,66,45,
		1,0,0,0,66,48,1,0,0,0,66,51,1,0,0,0,66,54,1,0,0,0,66,57,1,0,0,0,66,58,
		1,0,0,0,66,59,1,0,0,0,66,60,1,0,0,0,66,61,1,0,0,0,66,62,1,0,0,0,66,63,
		1,0,0,0,66,64,1,0,0,0,66,65,1,0,0,0,67,3,1,0,0,0,2,7,66
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
