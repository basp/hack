//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from HDL.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class HDLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, ID=14, INT=15, LETTER=16, DIGIT=17, 
		WS=18;
	public const int
		RULE_chip = 0, RULE_body = 1, RULE_part = 2, RULE_partName = 3, RULE_chipName = 4, 
		RULE_pinName = 5, RULE_pinWidth = 6, RULE_connections = 7, RULE_conn = 8, 
		RULE_inputs = 9, RULE_outputs = 10, RULE_pin = 11;
	public static readonly string[] ruleNames = {
		"chip", "body", "part", "partName", "chipName", "pinName", "pinWidth", 
		"connections", "conn", "inputs", "outputs", "pin"
	};

	private static readonly string[] _LiteralNames = {
		null, "'CHIP'", "'{'", "'IN'", "';'", "'OUT'", "'}'", "'PARTS:'", "'('", 
		"')'", "','", "'='", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "ID", "INT", "LETTER", "DIGIT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HDL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static HDLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public HDLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public HDLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ChipContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChipNameContext chipName() {
			return GetRuleContext<ChipNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputsContext inputs() {
			return GetRuleContext<InputsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputsContext outputs() {
			return GetRuleContext<OutputsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ChipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chip; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.EnterChip(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.ExitChip(this);
		}
	}

	[RuleVersion(0)]
	public ChipContext chip() {
		ChipContext _localctx = new ChipContext(Context, State);
		EnterRule(_localctx, 0, RULE_chip);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			Match(T__0);
			State = 25;
			chipName();
			State = 26;
			Match(T__1);
			State = 27;
			Match(T__2);
			State = 28;
			inputs();
			State = 29;
			Match(T__3);
			State = 30;
			Match(T__4);
			State = 31;
			outputs();
			State = 32;
			Match(T__3);
			State = 33;
			body();
			State = 34;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PartContext[] part() {
			return GetRuleContexts<PartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartContext part(int i) {
			return GetRuleContext<PartContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			Match(T__6);
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 37;
				part();
				}
				}
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PartNameContext partName() {
			return GetRuleContext<PartNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectionsContext connections() {
			return GetRuleContext<ConnectionsContext>(0);
		}
		public PartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.EnterPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.ExitPart(this);
		}
	}

	[RuleVersion(0)]
	public PartContext part() {
		PartContext _localctx = new PartContext(Context, State);
		EnterRule(_localctx, 4, RULE_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			partName();
			State = 43;
			Match(T__7);
			State = 44;
			connections();
			State = 45;
			Match(T__8);
			State = 46;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(HDLParser.ID, 0); }
		public PartNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.EnterPartName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.ExitPartName(this);
		}
	}

	[RuleVersion(0)]
	public PartNameContext partName() {
		PartNameContext _localctx = new PartNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_partName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChipNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(HDLParser.ID, 0); }
		public ChipNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chipName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.EnterChipName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.ExitChipName(this);
		}
	}

	[RuleVersion(0)]
	public ChipNameContext chipName() {
		ChipNameContext _localctx = new ChipNameContext(Context, State);
		EnterRule(_localctx, 8, RULE_chipName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(HDLParser.ID, 0); }
		public PinNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pinName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.EnterPinName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.ExitPinName(this);
		}
	}

	[RuleVersion(0)]
	public PinNameContext pinName() {
		PinNameContext _localctx = new PinNameContext(Context, State);
		EnterRule(_localctx, 10, RULE_pinName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinWidthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(HDLParser.INT, 0); }
		public PinWidthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pinWidth; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.EnterPinWidth(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.ExitPinWidth(this);
		}
	}

	[RuleVersion(0)]
	public PinWidthContext pinWidth() {
		PinWidthContext _localctx = new PinWidthContext(Context, State);
		EnterRule(_localctx, 12, RULE_pinWidth);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConnContext[] conn() {
			return GetRuleContexts<ConnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnContext conn(int i) {
			return GetRuleContext<ConnContext>(i);
		}
		public ConnectionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connections; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.EnterConnections(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.ExitConnections(this);
		}
	}

	[RuleVersion(0)]
	public ConnectionsContext connections() {
		ConnectionsContext _localctx = new ConnectionsContext(Context, State);
		EnterRule(_localctx, 14, RULE_connections);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			conn();
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 57;
				Match(T__9);
				State = 58;
				conn();
				}
				}
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PinContext[] pin() {
			return GetRuleContexts<PinContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PinContext pin(int i) {
			return GetRuleContext<PinContext>(i);
		}
		public ConnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.EnterConn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.ExitConn(this);
		}
	}

	[RuleVersion(0)]
	public ConnContext conn() {
		ConnContext _localctx = new ConnContext(Context, State);
		EnterRule(_localctx, 16, RULE_conn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			pin();
			State = 65;
			Match(T__10);
			State = 66;
			pin();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PinContext[] pin() {
			return GetRuleContexts<PinContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PinContext pin(int i) {
			return GetRuleContext<PinContext>(i);
		}
		public InputsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.EnterInputs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.ExitInputs(this);
		}
	}

	[RuleVersion(0)]
	public InputsContext inputs() {
		InputsContext _localctx = new InputsContext(Context, State);
		EnterRule(_localctx, 18, RULE_inputs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			pin();
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 69;
				Match(T__9);
				State = 70;
				pin();
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PinContext[] pin() {
			return GetRuleContexts<PinContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PinContext pin(int i) {
			return GetRuleContext<PinContext>(i);
		}
		public OutputsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.EnterOutputs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.ExitOutputs(this);
		}
	}

	[RuleVersion(0)]
	public OutputsContext outputs() {
		OutputsContext _localctx = new OutputsContext(Context, State);
		EnterRule(_localctx, 20, RULE_outputs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			pin();
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 77;
				Match(T__9);
				State = 78;
				pin();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PinNameContext pinName() {
			return GetRuleContext<PinNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PinWidthContext pinWidth() {
			return GetRuleContext<PinWidthContext>(0);
		}
		public PinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.EnterPin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHDLListener typedListener = listener as IHDLListener;
			if (typedListener != null) typedListener.ExitPin(this);
		}
	}

	[RuleVersion(0)]
	public PinContext pin() {
		PinContext _localctx = new PinContext(Context, State);
		EnterRule(_localctx, 22, RULE_pin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			pinName();
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 85;
				Match(T__11);
				State = 86;
				pinWidth();
				State = 87;
				Match(T__12);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,18,92,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
		0,1,0,1,0,1,0,1,0,1,1,1,1,4,1,39,8,1,11,1,12,1,40,1,2,1,2,1,2,1,2,1,2,
		1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,5,7,60,8,7,10,7,12,7,63,
		9,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,5,9,72,8,9,10,9,12,9,75,9,9,1,10,1,10,
		1,10,5,10,80,8,10,10,10,12,10,83,9,10,1,11,1,11,1,11,1,11,1,11,3,11,90,
		8,11,1,11,0,0,12,0,2,4,6,8,10,12,14,16,18,20,22,0,0,84,0,24,1,0,0,0,2,
		36,1,0,0,0,4,42,1,0,0,0,6,48,1,0,0,0,8,50,1,0,0,0,10,52,1,0,0,0,12,54,
		1,0,0,0,14,56,1,0,0,0,16,64,1,0,0,0,18,68,1,0,0,0,20,76,1,0,0,0,22,84,
		1,0,0,0,24,25,5,1,0,0,25,26,3,8,4,0,26,27,5,2,0,0,27,28,5,3,0,0,28,29,
		3,18,9,0,29,30,5,4,0,0,30,31,5,5,0,0,31,32,3,20,10,0,32,33,5,4,0,0,33,
		34,3,2,1,0,34,35,5,6,0,0,35,1,1,0,0,0,36,38,5,7,0,0,37,39,3,4,2,0,38,37,
		1,0,0,0,39,40,1,0,0,0,40,38,1,0,0,0,40,41,1,0,0,0,41,3,1,0,0,0,42,43,3,
		6,3,0,43,44,5,8,0,0,44,45,3,14,7,0,45,46,5,9,0,0,46,47,5,4,0,0,47,5,1,
		0,0,0,48,49,5,14,0,0,49,7,1,0,0,0,50,51,5,14,0,0,51,9,1,0,0,0,52,53,5,
		14,0,0,53,11,1,0,0,0,54,55,5,15,0,0,55,13,1,0,0,0,56,61,3,16,8,0,57,58,
		5,10,0,0,58,60,3,16,8,0,59,57,1,0,0,0,60,63,1,0,0,0,61,59,1,0,0,0,61,62,
		1,0,0,0,62,15,1,0,0,0,63,61,1,0,0,0,64,65,3,22,11,0,65,66,5,11,0,0,66,
		67,3,22,11,0,67,17,1,0,0,0,68,73,3,22,11,0,69,70,5,10,0,0,70,72,3,22,11,
		0,71,69,1,0,0,0,72,75,1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,19,1,0,0,
		0,75,73,1,0,0,0,76,81,3,22,11,0,77,78,5,10,0,0,78,80,3,22,11,0,79,77,1,
		0,0,0,80,83,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,21,1,0,0,0,83,81,1,
		0,0,0,84,89,3,10,5,0,85,86,5,12,0,0,86,87,3,12,6,0,87,88,5,13,0,0,88,90,
		1,0,0,0,89,85,1,0,0,0,89,90,1,0,0,0,90,23,1,0,0,0,5,40,61,73,81,89
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
