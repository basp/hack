//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from HDL.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class HDLLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, ID=14, INT=15, LETTER=16, DIGIT=17, 
		WS=18;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "ID", "INT", "LETTER", "DIGIT", "WS"
	};


	public HDLLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public HDLLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'CHIP'", "'{'", "'IN'", "';'", "'OUT'", "'}'", "'PARTS:'", "'('", 
		"')'", "','", "'='", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "ID", "INT", "LETTER", "DIGIT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HDL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static HDLLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,18,94,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
		14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,
		2,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,
		1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,5,13,77,8,13,10,
		13,12,13,80,9,13,1,14,4,14,83,8,14,11,14,12,14,84,1,15,1,15,1,16,1,16,
		1,17,1,17,1,17,1,17,0,0,18,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
		10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,1,0,5,3,0,65,90,95,
		95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,65,90,97,122,1,0,48,57,3,0,
		9,10,13,13,32,32,95,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
		9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
		0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,
		31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,1,37,1,0,0,0,3,42,1,0,0,0,5,44,1,
		0,0,0,7,47,1,0,0,0,9,49,1,0,0,0,11,53,1,0,0,0,13,55,1,0,0,0,15,62,1,0,
		0,0,17,64,1,0,0,0,19,66,1,0,0,0,21,68,1,0,0,0,23,70,1,0,0,0,25,72,1,0,
		0,0,27,74,1,0,0,0,29,82,1,0,0,0,31,86,1,0,0,0,33,88,1,0,0,0,35,90,1,0,
		0,0,37,38,5,67,0,0,38,39,5,72,0,0,39,40,5,73,0,0,40,41,5,80,0,0,41,2,1,
		0,0,0,42,43,5,123,0,0,43,4,1,0,0,0,44,45,5,73,0,0,45,46,5,78,0,0,46,6,
		1,0,0,0,47,48,5,59,0,0,48,8,1,0,0,0,49,50,5,79,0,0,50,51,5,85,0,0,51,52,
		5,84,0,0,52,10,1,0,0,0,53,54,5,125,0,0,54,12,1,0,0,0,55,56,5,80,0,0,56,
		57,5,65,0,0,57,58,5,82,0,0,58,59,5,84,0,0,59,60,5,83,0,0,60,61,5,58,0,
		0,61,14,1,0,0,0,62,63,5,40,0,0,63,16,1,0,0,0,64,65,5,41,0,0,65,18,1,0,
		0,0,66,67,5,44,0,0,67,20,1,0,0,0,68,69,5,61,0,0,69,22,1,0,0,0,70,71,5,
		91,0,0,71,24,1,0,0,0,72,73,5,93,0,0,73,26,1,0,0,0,74,78,7,0,0,0,75,77,
		7,1,0,0,76,75,1,0,0,0,77,80,1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,0,79,28,
		1,0,0,0,80,78,1,0,0,0,81,83,3,33,16,0,82,81,1,0,0,0,83,84,1,0,0,0,84,82,
		1,0,0,0,84,85,1,0,0,0,85,30,1,0,0,0,86,87,7,2,0,0,87,32,1,0,0,0,88,89,
		7,3,0,0,89,34,1,0,0,0,90,91,7,4,0,0,91,92,1,0,0,0,92,93,6,17,0,0,93,36,
		1,0,0,0,3,0,78,84,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
